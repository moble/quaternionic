name: Python package

on: [push, pull_request]

jobs:
  build:
    name: Build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest]
        python-version: [3.6]

    steps:
    - uses: actions/checkout@v2

    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v2
    #   with:
    #     python-version: ${{ matrix.python-version }}

    # - name: Install poetry
    #   shell: bash -l {0}
    #   run: |
    #     python -m pip install --upgrade pip
    #     #pip install poetry  # Only install poetry like this in containers
    #     pip install --user --pre poetry -U  # Temporary: https://github.com/python-poetry/poetry/issues/2711

    # - name: Run poetry
    #   shell: bash -l {0}
    #   run: |
    #     python -m poetry build
    #     python -m poetry install
    #     python -m poetry run pytest

  release:
    name: Create release and send to PyPI
    needs: build
    runs-on: ubuntu-latest
    #if: ${{ github.ref == 'master' }}
    #if: "contains(github.event.head_commit.message, 'Release v')"

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8  # We need this for importlib.metadata

      - name: Construct Changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.github_token }}

      - name: Install poetry
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          #pip install poetry  # Only install poetry like this in containers
          pip install --user --pre poetry -U  # Temporary: https://github.com/python-poetry/poetry/issues/2711

      - name: Bump version and push
        shell: bash -l {0}
        run: |
          echo "<changelog>"
          echo ${{ steps.changelog.outputs.clean_changelog }}
          echo "</changelog>"
          echo ""
          export version_bump_rule=$(echo "
              if '#prerelease' in '${message}':
                  print('prerelease')
              else:
                  for pre in ['pre', '']:
                      for level in ['patch', 'minor', 'major']:
                          if f'#{pre}{level}' in '${message}':
                              print(f'{pre}{level}')
                              break
          " | sed -e 's/^[[:space:]]\{4\}//' | python)
          echo "version_bump_rule: '${version_bump_rule}'"
          python -m poetry version {{ version_bump_rule }}
          export new_version=$(
            poetry run python -c 'from importlib.metadata import version; print(version("quaternionic"))'
          )
          echo "new_version: '${new_version}'"
          git config user.name github-actions
          git config user.email github-actions@github.com
          # git config --local user.email "$(git log --format='%ae' HEAD^!)"
          # git config --local user.name "$(git log --format='%an' HEAD^!)"
          git add pyproject.toml
          git commit -m "Bump version to v${new_version}"
          git tag -a "v${new_version}" -m "Version ${new_version}"
      #     git push --follow-tags
      #     # This uses GITHUB_TOKEN, which won't trigger a new workflow run â€” which is how we want it
      #     # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token

      # - name: Publish to PyPI
      #   shell: bash -l {0}
      #   run: |
      #     python -m poetry build
      #     python -m poetry install
      #     python -m poetry publish

      # - name: Create release
      #   id: create_release
      #   uses: actions/create-release@latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       ${{ steps.generate_changelog.outputs.changelog }}
      #     draft: false
      #     prerelease: false
