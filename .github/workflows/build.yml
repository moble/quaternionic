name: tests

on: [push]

jobs:

  build:
    name: ${{ matrix.os }} python ${{ matrix.python-version }}

    runs-on: ${{ matrix.os }}

    if: >-
        !contains(github.event.head_commit.message, '[skip ci]')
        && !contains(github.event.head_commit.message, '[skip tests]')

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.9]

    env:
      POETRY_VIRTUALENVS_CREATE: false

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        shell: bash
        run: |
          curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          python get-poetry.py -y
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Build and install with poetry
        shell: bash
        run: |
          poetry env info
          poetry run python -m pip install --upgrade pip
          rm poetry.lock
          poetry update
          poetry build
          poetry install --no-interaction

      - name: Run tests
        shell: bash
        run: |
          poetry run pytest -s --cov=quaternionic --cov-branch --cov-report=xml

      - name: Upload coverage
        if: "matrix.python-version == 3.9 && matrix.os == 'ubuntu-latest'"
        shell: bash
        run: |
          bash <(curl -s https://codecov.io/bash)


  release:
    name: Create release and send to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: >-
        github.ref == 'refs/heads/main'
        && !contains(github.event.head_commit.message, '[no release]')
        && (success() || contains(github.event.head_commit.message, '[skip tests]'))

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install poetry
        shell: bash
        run: |
          curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          python get-poetry.py -y
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Build and install with poetry
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        shell: bash
        run: |
          poetry env info
          poetry run python -m pip install --upgrade pip toml
          rm poetry.lock
          poetry update
          poetry build
          poetry install --no-interaction --no-dev

      - name: Bump version
        shell: bash
        env:
          github_event_head_commit_message: ${{ github.event.head_commit.message }}
        run: |
          export version_bump_rule=$(python .github/scripts/parse_bump_rule.py)
          echo "version_bump_rule: '${version_bump_rule}'"
          poetry version "${version_bump_rule}"
          export new_version=$(python .github/scripts/parse_version.py pyproject.toml)
          echo "new_version: '${new_version}'"
          echo "new_version=${new_version}" >> $GITHUB_ENV

      - name: Tag and push new version
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pyproject.toml
          git commit -m "Bump version to v${new_version}"
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      - name: Create release
        if: "!contains(github.event.head_commit.message, '[no release]')"
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release v${{ env.new_version }}
          draft: false
          prerelease: false

      - name: Publish to PyPI
        if: "!contains(github.event.head_commit.message, '[no pypi]')"
        env:
          # 1) Get key from https://pypi.org/manage/account/token/
          # 2) Copy it to Github > repo > Settings > Secrets
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m poetry build
          python -m poetry install --no-dev
          python -m poetry publish
